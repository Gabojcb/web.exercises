"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBinder = exports.hmr = exports.__beyond_pkg = void 0;
var dependency_0 = require("@beyond-js/kernel/bundle");
var dependency_1 = require("react");
const {
  Bundle: __Bundle
} = dependency_0;
const __pkg = new __Bundle({
  "module": {
    "vspecifier": "@beyond-js/react-18-widgets@0.0.5/hooks"
  },
  "type": "ts"
}).package();
;
__pkg.dependencies.update([['react', dependency_1]]);
const ims = new Map();

/***********************
INTERNAL MODULE: ./index
***********************/

ims.set('./index', {
  hash: 364360737,
  creator: function (require, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useBinder = useBinder;
    var React = require("react");
    /*bundle*/ /***
                * Executes a useEffect hook binging the event defined in all
                * objects passed
                *
                * @param {array} objects Objects to bind
                * @param {function} onBinder function to be executed when the event is fired
                * @param {string} event the event to be listened, by default is event change
                */
    function useBinder(objects, onBinder, event = 'change') {
      React.useEffect(() => {
        objects.forEach(object => {
          if (!object) throw new Error(`object is not valid in useBinder ${object}`);
          object.on(event, onBinder);
        });
        return () => objects.forEach(object => object.off(event, onBinder));
      }, []);
    }
  }
});
__pkg.exports.descriptor = [{
  "im": "./index",
  "from": "useBinder",
  "name": "useBinder"
}];
let useBinder;

// Module exports
exports.useBinder = useBinder;
__pkg.exports.process = function ({
  require,
  prop,
  value
}) {
  (require || prop === 'useBinder') && (exports.useBinder = useBinder = require ? require('./index').useBinder : value);
};
const __beyond_pkg = __pkg;
exports.__beyond_pkg = __beyond_pkg;
const hmr = new function () {
  this.on = (event, listener) => void 0;
  this.off = (event, listener) => void 0;
}();
exports.hmr = hmr;
__pkg.initialise(ims);
//# sourceMappingURL=hooks.cjs.js.map