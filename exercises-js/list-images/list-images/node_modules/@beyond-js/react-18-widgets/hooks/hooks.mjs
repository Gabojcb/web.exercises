import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from 'react';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"@beyond-js/react-18-widgets@0.0.5/hooks"},"type":"ts"}, import.meta.url).package();;

__pkg.dependencies.update([['react', dependency_1]]);

const ims = new Map();

/***********************
INTERNAL MODULE: ./index
***********************/

ims.set('./index', {hash: 364360737, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBinder = useBinder;
var React = require("react");
/*bundle*/ /***
            * Executes a useEffect hook binging the event defined in all
            * objects passed
            *
            * @param {array} objects Objects to bind
            * @param {function} onBinder function to be executed when the event is fired
            * @param {string} event the event to be listened, by default is event change
            */
function useBinder(objects, onBinder, event = 'change') {
  React.useEffect(() => {
    objects.forEach(object => {
      if (!object) throw new Error(`object is not valid in useBinder ${object}`);
      object.on(event, onBinder);
    });
    return () => objects.forEach(object => object.off(event, onBinder));
  }, []);
}
}});

__pkg.exports.descriptor = [{"im":"./index","from":"useBinder","name":"useBinder"}];

export let useBinder;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'useBinder') && (useBinder = require ? require('./index').useBinder : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=hooks.mjs.map