import * as dependency_0 from '@beyond-js/kernel/bundle';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"@beyond-js/widgets@0.1.4/render"},"type":"ts"}, import.meta.url).package();;

__pkg.dependencies.update([]);

const ims = new Map();

/*************************
INTERNAL MODULE: ./widgets
*************************/

ims.set('./widgets', {hash: 874236216, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.widgets = void 0;
/*bundle*/const widgets = new class BeyondWidgets extends Map {
  constructor() {
    super();
  }
  register(specs) {
    specs.forEach(specs => {
      // Widgets can be registered at application start, and later by the widget bundle
      if (this.has(specs.name)) return;
      specs.render = specs.render ? specs.render : {
        csr: true,
        ssr: false,
        sr: false
      };
      const {
        name,
        render
      } = specs;
      render.csr = typeof render.csr === 'boolean' ? render.csr : true;
      this.set(name, specs);
    });
  }
}();
exports.widgets = widgets;
}});

__pkg.exports.descriptor = [{"im":"./widgets","from":"IWidgetSpecs","name":"IWidgetSpecs"},{"im":"./widgets","from":"StylesManager","name":"StylesManager"},{"im":"./widgets","from":"BeyondWidget","name":"BeyondWidget"},{"im":"./widgets","from":"widgets","name":"widgets"}];

export let IWidgetSpecs, StylesManager, BeyondWidget, widgets;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'IWidgetSpecs') && (IWidgetSpecs = require ? require('./widgets').IWidgetSpecs : value);
    (require || prop === 'StylesManager') && (StylesManager = require ? require('./widgets').StylesManager : value);
    (require || prop === 'BeyondWidget') && (BeyondWidget = require ? require('./widgets').BeyondWidget : value);
    (require || prop === 'widgets') && (widgets = require ? require('./widgets').widgets : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=render.mjs.map