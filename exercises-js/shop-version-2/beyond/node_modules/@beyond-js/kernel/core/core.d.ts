/************
Processor: ts
************/

// FILE: beyond.d.ts
declare namespace ns_beyond {
    class Beyond {
        /**
         * @deprecated
         * Use import {languages} from '@beyond-js/kernel/core';
         */
        get languages(): ns_languages_index.Languages;
        /**
         * @deprecated
         * Use bimport instead of beyond.import
         *
         * @param {string} resource
         * @param {number} version
         * @return {Promise<*>}
         */
        import(resource: string, version: number): Promise<any>;
    }
    const beyond: Beyond;
}

// FILE: languages\index.d.ts
declare namespace ns_languages_index {
    import Events = ns_utils_events_events.Events;
    interface ILanguagesSpecs {
        default: string;
        supported: string[];
    }
    class Languages extends Events {
        #private;
        get supported(): Set<string>;
        get default(): string;
        get current(): string;
        get ready(): Promise<unknown>;
        get fetched(): boolean;
        constructor(project: string);
        set current(value: string);
    }
    const languages: Languages;
}

// FILE: utils\events\events.d.ts
declare namespace ns_utils_events_events {
    import EventsSpecs = ns_utils_events_types.EventsSpecs;
    import ListenerFunction = ns_utils_events_types.ListenerFunction;
    import Trigger = ns_utils_events_types.Trigger;
    class Events {
        #private;
        get destroyed(): boolean;
        constructor(specs?: EventsSpecs);
        /**
         * Binds an event handler to an event name
         *
         * @param {string} event
         * @param {ListenerFunction} listener
         * @param {number} priority
         * @returns {this}
         */
        on(event: string, listener: ListenerFunction, priority?: number): this;
        bind: (event: string, listener: ListenerFunction, priority?: number) => this;
        /**
         * Unbind an event listener
         *
         * @param {string} event
         * @param {ListenerFunction} listener
         * @param {number} force
         * @returns {this}
         */
        off(event: string, listener: ListenerFunction, force?: number): this;
        unbind: (event: string, listener: ListenerFunction, force?: number) => this;
        /**
         * Triggers an event
         *
         * @param {Trigger} event
         * @param {*} rest
         * @returns {Promise<*>}
         */
        trigger(event: Trigger, ...rest: any): any;
        destroy(): void;
    }
}

// FILE: utils\events\types.d.ts
declare namespace ns_utils_events_types {
    interface Inherited {
        bind: (event: string, listener: ListenerFunction, priority: number) => void;
        unbind: (event: string, Listener: ListenerFunction) => void;
    }
    interface EventsSpecs {
        supported?: [
            string
        ];
        bind?: Inherited;
    }
    type ListenerFunction = (...args: any) => void;
    interface ListenerSpecs {
        listener: ListenerFunction;
        priority: number;
    }
    interface TriggerSpecs {
        name: string;
        async?: boolean;
    }
    type Trigger = string | TriggerSpecs;
}

// FILE: utils\execution-control\cancellation-token\cancellation-token.d.ts
declare namespace ns_utils_executioncontrol_cancellationtoken_cancellationtoken {
    class CancellationToken {
        #private;
        get current(): number;
        reset: () => number;
        check: (id: number) => boolean;
    }
}

// FILE: utils\execution-control\single-call\single-call.d.ts
declare namespace ns_utils_executioncontrol_singlecall_singlecall {
    function SingleCall(target: any, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor;
}

// FILE: utils\pending-promise\pending-promise.d.ts
declare namespace ns_utils_pendingpromise_pendingpromise {
    class PendingPromise<T> extends Promise<T> {
        resolve: any;
        reject: any;
        constructor(executor?: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void);
    }
}

export import beyond = ns_beyond.beyond;
export import Languages = ns_languages_index.Languages;
export import languages = ns_languages_index.languages;
export import Events = ns_utils_events_events.Events;
export import ListenerFunction = ns_utils_events_types.ListenerFunction;
export import CancellationToken = ns_utils_executioncontrol_cancellationtoken_cancellationtoken.CancellationToken;
export import SingleCall = ns_utils_executioncontrol_singlecall_singlecall.SingleCall;
export import PendingPromise = ns_utils_pendingpromise_pendingpromise.PendingPromise;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };