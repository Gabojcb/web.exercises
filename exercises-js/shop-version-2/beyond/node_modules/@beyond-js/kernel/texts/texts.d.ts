/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/core';

// FILE: current.d.ts
declare namespace ns_current {
    import Events = dependency_0.Events;
    interface IWidgetStore {
        toJSON(): object | void;
        hydrate?(cached: object): Promise<void>;
        fetch(): Promise<void>;
    }
    /**
     * The texts loaded by the current language (not available in SSR environment)
     */
    class CurrentTexts<TextsDeclaration> extends Events implements IWidgetStore {
        #private;
        get bundle(): string;
        get enabled(): boolean;
        set enabled(value: boolean);
        get loading(): boolean;
        get loaded(): boolean;
        get ready(): boolean;
        get value(): TextsDeclaration;
        /**
         * Current texts constructor
         *
         * @param {string} bundle
         */
        constructor(bundle: string);
        fetch(): Promise<void>;
        /**
         * @deprecated Deprecated method. Use .fetch instead
         * @return {Promise<void>}
         */
        load(): Promise<void>;
        destroy(): void;
        toJSON(): {};
    }
}

// FILE: texts.d.ts
declare namespace ns_texts {
    import Events = dependency_0.Events;
    interface IWidgetStore {
        toJSON(): object | void;
        hydrate?(cached: object): Promise<void>;
        fetch(): Promise<void>;
    }
    class Texts<TextsDeclaration> extends Events implements IWidgetStore {
        #private;
        get module(): string;
        get bundle(): string;
        get transversal(): string;
        get multilanguage(): boolean;
        get language(): string;
        get loaded(): boolean;
        get loading(): boolean;
        get value(): TextsDeclaration;
        get ready(): boolean;
        /**
         * Module texts constructor
         *
         * @param {string} module The module resource
         * @param {{transversal: string, language: string}} specs
         */
        constructor(module: string, specs: {
            transversal?: string;
            language?: string;
            bundle?: string;
        });
        fetch(): Promise<void>;
        /**
         * @deprecated Deprecated method. Use .fetch instead
         * @return {Promise<void>}
         */
        load(): Promise<void>;
        destroy(): void;
        toJSON(): {};
    }
}

export import CurrentTexts = ns_current.CurrentTexts;
export import Texts = ns_texts.Texts;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };