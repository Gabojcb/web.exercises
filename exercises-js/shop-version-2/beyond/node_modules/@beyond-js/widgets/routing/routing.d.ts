/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/core';
import * as dependency_1 from '@beyond-js/widgets/render';
import * as dependency_2 from '@beyond-js/kernel/routing';

// FILE: layouts\index.d.ts
declare namespace ns_layouts_index {
    import Layout = ns_layouts_layout.Layout;
    /**
     * The registry of all layouts instances registered in the session, except the main layout
     */
    class _default extends Map<string, Layout> {
        register(layout: Layout): void;
    }
}

// FILE: layouts\layout.d.ts
declare namespace ns_layouts_layout {
    import Layouts = ns_layouts_index._default;
    import PageInstance = ns_pages_instance.PageInstance;
    import Events = dependency_0.Events;
    import IWidgetSpecs = dependency_1.IWidgetSpecs;
    type LayoutChild = Layout | PageInstance;
    class Layout extends Events {
        #private;
        get is(): string;
        get element(): string;
        get id(): string;
        get active(): LayoutChild;
        get children(): Map<string, LayoutChild>;
        /**
         * Layout constructor
         *
         * @param {Layouts} layouts The layouts registry
         * @param {string} element The element name of the widget. Undefined if the project does not set a layout
         * and the index.html has a <beyond-layout-children/> as its main layout container
         * @param {Layout} parent The parent layout. Undefined if it is the main layout
         */
        constructor(layouts: Layouts, element?: string, parent?: Layout);
        /**
         * Selects a page
         *
         * @param {PageInstance} page The page being selected (navigated)
         * @param {IWidgetSpecs[]} descending The descending layouts
         */
        select(page: PageInstance, descending: IWidgetSpecs[]): void;
    }
}

// FILE: manager.d.ts
declare namespace ns_manager {
    import CancellationToken = dependency_0.CancellationToken;
    import URI = dependency_2.URI;
    import Layout = ns_layouts_layout.Layout;
    import Pages = ns_pages_index._default;
    import Layouts = ns_layouts_index._default;
    const manager: {
        readonly "__#50111@#instances": {
            layouts: Layouts;
            pages: Pages;
        };
        "__#50111@#initialised": boolean;
        readonly initialised: boolean;
        "__#50111@#resolve": any;
        "__#50111@#ready": Promise<unknown>;
        readonly ready: Promise<unknown>;
        readonly layouts: Layouts;
        readonly pages: Pages;
        "__#50111@#main": Layout;
        readonly main: Layout;
        "__#50111@#ct": CancellationToken;
        set(uri: URI): Promise<void>;
    };
}

// FILE: pages\index.d.ts
declare namespace ns_pages_index {
    import PageInstance = ns_pages_instance.PageInstance;
    import URI = dependency_2.URI;
    import Route = ns_route.Route;
    type pathname = string;
    class _default extends Map<pathname, PageInstance> {
        instance(id: string): PageInstance;
        register(uri: URI, route: Route): PageInstance;
    }
}

// FILE: pages\instance.d.ts
declare namespace ns_pages_instance {
    import URI = dependency_2.URI;
    import Route = ns_route.Route;
    import IWidgetSpecs = dependency_1.IWidgetSpecs;
    interface IParents {
        error?: string;
        value?: IWidgetSpecs[];
    }
    class PageInstance {
        #private;
        get uri(): URI;
        get route(): Route;
        get element(): string;
        get is(): string;
        get id(): string;
        /**
         * Returns the ascending layouts
         *
         * @return {{error?: string, parents?: IWidgetSpecs[]}}
         */
        get parents(): IParents;
        constructor(uri: URI, route: Route);
    }
}

// FILE: route.d.ts
declare namespace ns_route {
    class Route {
        #private;
        get pathname(): string;
        get page(): string;
        get vars(): Map<string, string>;
        constructor(pathname: string);
        process(): Promise<void>;
    }
}

// FILE: uri.d.ts
declare namespace ns_uri {
    import URI = dependency_2.URI;
    import BeyondWidget = dependency_1.BeyondWidget;
    import Route = ns_route.Route;
    class PageURI {
        #private;
        get uri(): URI;
        get pathname(): string;
        get search(): string;
        get qs(): dependency_2.ns_uri_querystring.QueryString;
        get hash(): string;
        get vars(): Map<string, string>;
        constructor({ widget, uri, route }: {
            widget?: BeyondWidget;
            uri?: URI;
            route?: Route;
        });
    }
}

export import Layout = ns_layouts_layout.Layout;
export import manager = ns_manager.manager;
export import PageInstance = ns_pages_instance.PageInstance;
export import Route = ns_route.Route;
export import PageURI = ns_uri.PageURI;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };