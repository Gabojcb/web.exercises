/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from '@beyond-js/kernel/core';
import * as dependency_2 from 'socket.io-client';

// FILE: action\bridge.d.ts
declare namespace ns_action_bridge {
    import Bundle = dependency_0.Bundle;
    class ActionsBridge {
        #private;
        constructor(distribution: string, bundle: Bundle);
        execute(action: string, ...params: any[]): Promise<any>;
    }
}

// FILE: action\execution-error.d.ts
declare namespace ns_action_executionerror {
    interface StackFrame {
        is: string;
        file: string;
        line: number;
        column: number;
    }
    type Stack = StackFrame[];
    const ExecutionError: {
        new (message: string, stack: Stack): {
            readonly "__#47094@#message": string;
            readonly message: string;
            readonly "__#47094@#stack": Stack;
            readonly stack: Stack;
        };
    };
}

// FILE: action\index.d.ts
declare namespace ns_action_index {
    import Events = dependency_1.Events;
    class _default extends Events {
        #private;
        get module(): string;
        get action(): string;
        get params(): any[];
        constructor(backend: string, module: string, action: string, ...params: any[]);
        get id(): number;
        get channel(): string;
        get executed(): boolean;
        get executing(): boolean;
        get error(): boolean;
        execute(): Promise<any>;
    }
}

// FILE: backend.d.ts
declare namespace ns_backend {
    import ServiceIOConfiguration = ns_io.ServiceIOConfiguration;
    class Backend {
        #private;
        get pkg(): string;
        get host(): string;
        get local(): string;
        get io(): ServiceIOConfiguration;
        constructor(pkg: string, host: string, local?: string);
        get socket(): Promise<import("socket.io-client").Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>>;
    }
}

// FILE: backends.d.ts
declare namespace ns_backends {
    import Backend = ns_backend.Backend;
    const backends: {
        readonly "__#47093@#hosts": Map<string, Backend>;
        register(pkg: string, host: string): void;
        get(pkg: string): Promise<Backend>;
        /**
         * @deprecated Actually used by the legacy module.execute(...)
         *
         * @param {string} pkg
         * @param {string} distribution
         * @param {string} module
         * @param {string} action
         * @param params
         * @return {Promise<*>}
         */
        execute(pkg: string, distribution: string, module: string, action: string, ...params: any[]): Promise<any>;
    };
}

// FILE: io.d.ts
declare namespace ns_io {
    class ServiceIOConfiguration {
        querystring: () => object;
    }
}

// FILE: socket\index.d.ts
declare namespace ns_socket_index {
    import Socket = dependency_2.Socket;
    import Backend = ns_backend.Backend;
    class _default {
        #private;
        constructor(backend: Backend);
        get(): Promise<Socket>;
    }
}

// FILE: socket\initiator.d.ts
declare namespace ns_socket_initiator {
    import Backend = ns_backend.Backend;
    /**
     * Service launcher required only in local development environment
     */
    class _default {
        #private;
        constructor(backend: Backend);
        check(): Promise<void>;
    }
}

export import ActionsBridge = ns_action_bridge.ActionsBridge;
export import Backend = ns_backend.Backend;
export import backends = ns_backends.backends;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };