{"code":"System.register([\"engine.io-parser@5.0.6\",\"@socket.io/component-emitter@3.1.0\",\"engine.io-client@6.4.0\",\"socket.io-parser@4.2.2\"], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"engine.io-parser\",\"5.0.6\"],[\"@socket.io/component-emitter\",\"3.1.0\"],[\"engine.io-client\",\"6.4.0\"],[\"socket.io-client\",\"4.6.0\"],[\"socket.io-parser\",\"4.2.2\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [dep => dependencies.set('engine.io-parser@5.0.6', dep), dep => dependencies.set('@socket.io/component-emitter@3.1.0', dep), dep => dependencies.set('engine.io-client@6.4.0', dep), dep => dependencies.set('socket.io-parser@4.2.2', dep)],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/socket.io-client.4.6.0.js\nvar socket_io_client_4_6_0_exports = {};\n__export(socket_io_client_4_6_0_exports, {\n  Manager: () => Manager,\n  Socket: () => Socket,\n  connect: () => lookup,\n  default: () => socket_io_client_4_6_0_default,\n  io: () => lookup,\n  protocol: () => import_socket4.protocol\n});\nmodule.exports = __toCommonJS(socket_io_client_4_6_0_exports);\n\n// node_modules/socket.io-client/build/esm/url.js\nvar import_engine = require(\"engine.io-client@6.4.0\");\nfunction url(uri, path = \"\", loc) {\n  let obj = uri;\n  loc = loc || typeof location !== \"undefined\" && location;\n  if (null == uri) uri = loc.protocol + \"//\" + loc.host;\n  if (typeof uri === \"string\") {\n    if (\"/\" === uri.charAt(0)) {\n      if (\"/\" === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      if (\"undefined\" !== typeof loc) {\n        uri = loc.protocol + \"//\" + uri;\n      } else {\n        uri = \"https://\" + uri;\n      }\n    }\n    obj = (0, import_engine.parse)(uri);\n  }\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = \"80\";\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = \"443\";\n    }\n  }\n  obj.path = obj.path || \"/\";\n  const ipv6 = obj.host.indexOf(\":\") !== -1;\n  const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n  obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n  obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n  return obj;\n}\n\n// node_modules/socket.io-client/build/esm/on.js\nfunction on(obj, ev, fn) {\n  obj.on(ev, fn);\n  return function subDestroy() {\n    obj.off(ev, fn);\n  };\n}\n\n// node_modules/socket.io-client/build/esm/socket.js\nvar import_socket = require(\"socket.io-parser@4.2.2\");\nvar import_component_emitter = require(\"@socket.io/component-emitter@3.1.0\");\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  newListener: 1,\n  removeListener: 1\n});\nvar Socket = class extends import_component_emitter.Emitter {\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.recovered = false;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this._queue = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  get disconnected() {\n    return !this.connected;\n  }\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  get active() {\n    return !!this.subs;\n  }\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open();\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  open() {\n    return this.connect();\n  }\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: import_socket.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  _registerAckCallback(id, ack) {\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === void 0) {\n      this.acks[id] = ack;\n      return;\n    }\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = (...args) => {\n      this.io.clearTimeoutFn(timer);\n      ack.apply(this, [null, ...args]);\n    };\n  }\n  emitWithAck(ev, ...args) {\n    const withErr = this.flags.timeout !== void 0 || this._opts.ackTimeout !== void 0;\n    return new Promise((resolve, reject) => {\n      args.push((arg1, arg2) => {\n        if (withErr) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        } else {\n          return resolve(arg1);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  _addToQueue(args) {\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this.ids++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push((err, ...responseArgs) => {\n      if (packet !== this._queue[0]) {\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > this._opts.retries) {\n          this._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        this._queue.shift();\n        if (ack) {\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return this._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  _drainQueue() {\n    if (this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending) {\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    const currentId = this.ids;\n    this.ids = packet.id;\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n    this.ids = currentId;\n  }\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  _sendConnectPacket(data) {\n    this.packet({\n      type: import_socket.PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case import_socket.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case import_socket.PacketType.EVENT:\n      case import_socket.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case import_socket.PacketType.ACK:\n      case import_socket.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case import_socket.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case import_socket.PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      if (sent) return;\n      sent = true;\n      self.packet({\n        type: import_socket.PacketType.ACK,\n        id,\n        data: args\n      });\n    };\n  }\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid;\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  destroy() {\n    if (this.subs) {\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = void 0;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: import_socket.PacketType.DISCONNECT\n      });\n    }\n    this.destroy();\n    if (this.connected) {\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  close() {\n    return this.disconnect();\n  }\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n};\n\n// node_modules/socket.io-client/build/esm/contrib/backo2.js\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 1e4;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\nBackoff.prototype.duration = function () {\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand = Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\nBackoff.prototype.reset = function () {\n  this.attempts = 0;\n};\nBackoff.prototype.setMin = function (min) {\n  this.ms = min;\n};\nBackoff.prototype.setMax = function (max) {\n  this.max = max;\n};\nBackoff.prototype.setJitter = function (jitter) {\n  this.jitter = jitter;\n};\n\n// node_modules/socket.io-client/build/esm/manager.js\nvar import_engine2 = require(\"engine.io-client@6.4.0\");\nvar parser = __toESM(require(\"socket.io-parser@4.2.2\"), 0);\nvar import_component_emitter2 = require(\"@socket.io/component-emitter@3.1.0\");\nvar Manager = class extends import_component_emitter2.Emitter {\n  constructor(uri, opts) {\n    var _a;\n    super();\n    this.nsps = {};\n    this.subs = [];\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = void 0;\n    }\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    (0, import_engine2.installTimerFunctions)(this, opts);\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1e3);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);\n    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 2e4 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n    const _parser = opts.parser || parser;\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n  reconnectionAttempts(v) {\n    if (v === void 0) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n  reconnectionDelay(v) {\n    var _a;\n    if (v === void 0) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n  randomizationFactor(v) {\n    var _a;\n    if (v === void 0) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n  reconnectionDelayMax(v) {\n    var _a;\n    if (v === void 0) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  maybeReconnectOnOpen() {\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      this.reconnect();\n    }\n  }\n  open(fn) {\n    if (~this._readyState.indexOf(\"open\")) return this;\n    this.engine = new import_engine2.Socket(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false;\n    const openSubDestroy = on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    });\n    const errorSub = on(socket, \"error\", err => {\n      self.cleanup();\n      self._readyState = \"closed\";\n      this.emitReserved(\"error\", err);\n      if (fn) {\n        fn(err);\n      } else {\n        self.maybeReconnectOnOpen();\n      }\n    });\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      if (timeout === 0) {\n        openSubDestroy();\n      }\n      const timer = this.setTimeoutFn(() => {\n        openSubDestroy();\n        socket.close();\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  connect(fn) {\n    return this.open(fn);\n  }\n  onopen() {\n    this.cleanup();\n    this._readyState = \"open\";\n    this.emitReserved(\"open\");\n    const socket = this.engine;\n    this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  ondata(data) {\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      this.onclose(\"parse error\", e);\n    }\n  }\n  ondecoded(packet) {\n    (0, import_engine2.nextTick)(() => {\n      this.emitReserved(\"packet\", packet);\n    }, this.setTimeoutFn);\n  }\n  onerror(err) {\n    this.emitReserved(\"error\", err);\n  }\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n    if (!socket) {\n      socket = new Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    }\n    if (this._autoConnect) {\n      socket.connect();\n    }\n    return socket;\n  }\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n    for (const nsp of nsps) {\n      const socket2 = this.nsps[nsp];\n      if (socket2.active) {\n        return;\n      }\n    }\n    this._close();\n  }\n  _packet(packet) {\n    const encodedPackets = this.encoder.encode(packet);\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  cleanup() {\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  _close() {\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    this.onclose(\"forced close\");\n    if (this.engine) this.engine.close();\n  }\n  disconnect() {\n    return this._close();\n  }\n  onclose(reason, description) {\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    this.emitReserved(\"close\", reason, description);\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      this.backoff.reset();\n      this.emitReserved(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      this._reconnecting = true;\n      const timer = this.setTimeoutFn(() => {\n        if (self.skipReconnect) return;\n        this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            self._reconnecting = false;\n            self.reconnect();\n            this.emitReserved(\"reconnect_error\", err);\n          } else {\n            self.onreconnect();\n          }\n        });\n      }, delay);\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n  }\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    this.emitReserved(\"reconnect\", attempt);\n  }\n};\n\n// node_modules/socket.io-client/build/esm/index.js\nvar import_socket4 = require(\"socket.io-parser@4.2.2\");\nvar cache = {};\nfunction lookup(uri, opts) {\n  if (typeof uri === \"object\") {\n    opts = uri;\n    uri = void 0;\n  }\n  opts = opts || {};\n  const parsed = url(uri, opts.path || \"/socket.io\");\n  const source = parsed.source;\n  const id = parsed.id;\n  const path = parsed.path;\n  const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n  const newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n  let io;\n  if (newConnection) {\n    io = new Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      cache[id] = new Manager(source, opts);\n    }\n    io = cache[id];\n  }\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.queryKey;\n  }\n  return io.socket(parsed.path, opts);\n}\nObject.assign(lookup, {\n  Manager,\n  Socket,\n  io: lookup,\n  connect: lookup\n});\n\n// .beyond/uimport/socket.io-client.4.6.0.js\nvar socket_io_client_4_6_0_default = lookup;\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy5iZXlvbmQvdWltcG9ydC9zb2NrZXQuaW8tY2xpZW50LjQuNi4wLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtL3VybC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9vbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9zb2NrZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vY29udHJpYi9iYWNrbzIuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vbWFuYWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcyJdLCJuYW1lcyI6WyJzb2NrZXRfaW9fY2xpZW50XzRfNl8wX2V4cG9ydHMiLCJfX2V4cG9ydCIsIk1hbmFnZXIiLCJTb2NrZXQiLCJjb25uZWN0IiwibG9va3VwIiwiZGVmYXVsdCIsInNvY2tldF9pb19jbGllbnRfNF82XzBfZGVmYXVsdCIsImlvIiwicHJvdG9jb2wiLCJpbXBvcnRfc29ja2V0NCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3RvQ29tbW9uSlMiLCJpbXBvcnRfZW5naW5lIiwicmVxdWlyZSIsInVybCIsInVyaSIsInBhdGgiLCJsb2MiLCJvYmoiLCJsb2NhdGlvbiIsImhvc3QiLCJjaGFyQXQiLCJ0ZXN0IiwicGFyc2UiLCJwb3J0IiwiaXB2NiIsImluZGV4T2YiLCJpZCIsImhyZWYiLCJvbiIsImV2IiwiZm4iLCJzdWJEZXN0cm95Iiwib2ZmIiwiaW1wb3J0X3NvY2tldCIsImltcG9ydF9jb21wb25lbnRfZW1pdHRlciIsIlJFU0VSVkVEX0VWRU5UUyIsIk9iamVjdCIsImZyZWV6ZSIsImNvbm5lY3RfZXJyb3IiLCJkaXNjb25uZWN0IiwiZGlzY29ubmVjdGluZyIsIm5ld0xpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJuc3AiLCJvcHRzIiwiY29ubmVjdGVkIiwicmVjb3ZlcmVkIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJfcXVldWUiLCJpZHMiLCJhY2tzIiwiZmxhZ3MiLCJhdXRoIiwiX29wdHMiLCJhc3NpZ24iLCJfYXV0b0Nvbm5lY3QiLCJvcGVuIiwiZGlzY29ubmVjdGVkIiwic3ViRXZlbnRzIiwic3VicyIsIm9ub3BlbiIsImJpbmQiLCJvbnBhY2tldCIsIm9uZXJyb3IiLCJvbmNsb3NlIiwiYWN0aXZlIiwiX3JlYWR5U3RhdGUiLCJzZW5kIiwiYXJncyIsInVuc2hpZnQiLCJlbWl0IiwiYXBwbHkiLCJoYXNPd25Qcm9wZXJ0eSIsIkVycm9yIiwidG9TdHJpbmciLCJyZXRyaWVzIiwiZnJvbVF1ZXVlIiwidm9sYXRpbGUiLCJfYWRkVG9RdWV1ZSIsInBhY2tldCIsInR5cGUiLCJQYWNrZXRUeXBlIiwiRVZFTlQiLCJkYXRhIiwib3B0aW9ucyIsImNvbXByZXNzIiwibGVuZ3RoIiwiYWNrIiwicG9wIiwiX3JlZ2lzdGVyQWNrQ2FsbGJhY2siLCJpc1RyYW5zcG9ydFdyaXRhYmxlIiwiZW5naW5lIiwidHJhbnNwb3J0Iiwid3JpdGFibGUiLCJkaXNjYXJkUGFja2V0Iiwibm90aWZ5T3V0Z29pbmdMaXN0ZW5lcnMiLCJwdXNoIiwiX2EiLCJ0aW1lb3V0IiwiYWNrVGltZW91dCIsInRpbWVyIiwic2V0VGltZW91dEZuIiwiaSIsInNwbGljZSIsImNhbGwiLCJjbGVhclRpbWVvdXRGbiIsImVtaXRXaXRoQWNrIiwid2l0aEVyciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYXJnMSIsImFyZzIiLCJ0cnlDb3VudCIsInBlbmRpbmciLCJlcnIiLCJyZXNwb25zZUFyZ3MiLCJoYXNFcnJvciIsInNoaWZ0IiwiX2RyYWluUXVldWUiLCJjdXJyZW50SWQiLCJfcGFja2V0IiwiX3NlbmRDb25uZWN0UGFja2V0IiwiQ09OTkVDVCIsIl9waWQiLCJwaWQiLCJvZmZzZXQiLCJfbGFzdE9mZnNldCIsImVtaXRSZXNlcnZlZCIsInJlYXNvbiIsImRlc2NyaXB0aW9uIiwic2FtZU5hbWVzcGFjZSIsInNpZCIsIm9uY29ubmVjdCIsIkJJTkFSWV9FVkVOVCIsIm9uZXZlbnQiLCJBQ0siLCJCSU5BUllfQUNLIiwib25hY2siLCJESVNDT05ORUNUIiwib25kaXNjb25uZWN0IiwiQ09OTkVDVF9FUlJPUiIsImRlc3Ryb3kiLCJtZXNzYWdlIiwiZW1pdEV2ZW50IiwiX2FueUxpc3RlbmVycyIsImxpc3RlbmVycyIsInNsaWNlIiwibGlzdGVuZXIiLCJzZWxmIiwic2VudCIsImVtaXRCdWZmZXJlZCIsImZvckVhY2giLCJjbG9zZSIsIm9uQW55IiwicHJlcGVuZEFueSIsIm9mZkFueSIsImxpc3RlbmVyc0FueSIsIm9uQW55T3V0Z29pbmciLCJfYW55T3V0Z29pbmdMaXN0ZW5lcnMiLCJwcmVwZW5kQW55T3V0Z29pbmciLCJvZmZBbnlPdXRnb2luZyIsImxpc3RlbmVyc0FueU91dGdvaW5nIiwiQmFja29mZiIsIm1zIiwibWluIiwibWF4IiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJwcm90b3R5cGUiLCJkdXJhdGlvbiIsIk1hdGgiLCJwb3ciLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwiZmxvb3IiLCJyZXNldCIsInNldE1pbiIsInNldE1heCIsInNldEppdHRlciIsImltcG9ydF9lbmdpbmUyIiwicGFyc2VyIiwiX190b0VTTSIsImltcG9ydF9jb21wb25lbnRfZW1pdHRlcjIiLCJuc3BzIiwiaW5zdGFsbFRpbWVyRnVuY3Rpb25zIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiRW5jb2RlciIsImRlY29kZXIiLCJEZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJ2IiwiYXJndW1lbnRzIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsIl9yZWNvbm5lY3RpbmciLCJyZWNvbm5lY3QiLCJzb2NrZXQiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YkRlc3Ryb3kiLCJlcnJvclN1YiIsImNsZWFudXAiLCJhdXRvVW5yZWYiLCJ1bnJlZiIsImNsZWFyVGltZW91dCIsIm9ucGluZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsImFkZCIsImUiLCJuZXh0VGljayIsIl9kZXN0cm95Iiwia2V5cyIsInNvY2tldDIiLCJfY2xvc2UiLCJlbmNvZGVkUGFja2V0cyIsImVuY29kZSIsIndyaXRlIiwiZGVsYXkiLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJjYWNoZSIsInBhcnNlZCIsInNvdXJjZSIsIm5ld0Nvbm5lY3Rpb24iLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInF1ZXJ5IiwicXVlcnlLZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLDhCQUFBO0FBQUFDLFFBQUEsQ0FBQUQsOEJBQUE7RUFBQUUsT0FBQSxFQUFBQSxDQUFBLEtBQUFBLE9BQUE7RUFBQUMsTUFBQSxFQUFBQSxDQUFBLEtBQUFBLE1BQUE7RUFBQUMsT0FBQSxFQUFBQSxDQUFBLEtBQUFDLE1BQUE7RUFBQUMsT0FBQSxFQUFBQSxDQUFBLEtBQUFDLDhCQUFBO0VBQUFDLEVBQUEsRUFBQUEsQ0FBQSxLQUFBSCxNQUFBO0VBQUFJLFFBQUEsRUFBQUEsQ0FBQSxLQUFBQyxjQUFBLENBQUFEO0FBQUE7QUFBQUUsTUFBQSxDQUFBQyxPQUFBLEdBQUFD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","dependencies":[{"id":"engine.io-parser@5.0.6","path":"E:\\workspace\\exercises\\exercises-js\\shop-real\\project\\node_modules\\engine.io-parser"},{"id":"@socket.io/component-emitter@3.1.0","path":"E:\\workspace\\exercises\\exercises-js\\shop-real\\project\\node_modules\\@socket.io\\component-emitter"},{"id":"engine.io-client@6.4.0","path":"E:\\workspace\\exercises\\exercises-js\\shop-real\\project\\node_modules\\engine.io-client"},{"id":"socket.io-parser@4.2.2","path":"E:\\workspace\\exercises\\exercises-js\\shop-real\\project\\node_modules\\socket.io-parser"}],"warnings":[]}