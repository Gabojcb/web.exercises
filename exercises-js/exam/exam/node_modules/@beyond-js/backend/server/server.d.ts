/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'socket.io';
// bridges.ts
declare namespace ns_0 {
  type MethodsSpecs = Map<string, {}>;
  export type BridgeSpecs = Map<string, MethodsSpecs>;
  class Bridges {
    #private;
    initialize(): Promise<any>;
    get(module: string): Promise<{
      errors?: string[];
      classes?: BridgeSpecs;
    }>;
  }
  export const bridges: Bridges;
  export {};
}


// connection\cache\cache.ts
declare namespace ns_1 {
  export class Cache {
    #private;
    constructor(socketId: string);
    has(key: string): boolean;
    get(key: string): any;
    insert(key: string, value: any): void;
    update(key: string, value: any): void;
  }
}


// connection\connection.ts
declare namespace ns_2 {
  import Socket = __beyond_dep_ns_0.Socket;
  export class Connection {
    #private;
    constructor(socket: Socket);
    disconnect(): void;
  }
}


// connection\executor\action.ts
declare namespace ns_3 {
  export interface IActionRequest {
    id: string;
    module: string;
    action: string;
    params: any[];
  }
  export class Action {
    #private;
    get error(): string;
    get id(): string;
    get module(): string;
    get className(): string;
    get method(): string;
    get params(): any[];
    constructor(rq: IActionRequest);
  }
}


// connection\executor\executor.ts
declare namespace ns_4 {
  import IActionRequest = ns_3.IActionRequest;
  import Socket = __beyond_dep_ns_0.Socket;
  export class Executor {
    #private;
    constructor(socket: Socket);
    /**
     * Execute an action
     *
     * @param rq
     * @return {Promise<{response: (*)}|{error: module.exports.error}>}
     */
    execute(rq: IActionRequest): Promise<any>;
  }
}


// server.ts
declare namespace ns_5 {
  export class BackendServer {
    #private;
    constructor(port: number);
  }
}


export import BackendServer = ns_5.BackendServer;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };