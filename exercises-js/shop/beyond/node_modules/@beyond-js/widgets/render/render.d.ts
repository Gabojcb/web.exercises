/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/core';

// FILE: anchor.d.ts
declare namespace ns_anchor { }

// FILE: attributes.d.ts
declare namespace ns_attributes {
    import Events = dependency_0.Events;
    class Attributes extends Events {
        #private;
        get values(): Map<string, string>;
        add(name: string, value: string): void;
        remove(name: string): void;
    }
    const attributes: Attributes;
}

// FILE: instances\index.d.ts
declare namespace ns_instances_index {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    import NodeWidget = ns_instances_node.NodeWidget;
    const instances: {
        register(widget: BeyondWidget): NodeWidget;
        add(value: BeyondWidget): any;
        clear(): void;
        delete(value: BeyondWidget): boolean;
        forEach(callbackfn: (value: BeyondWidget, value2: BeyondWidget, set: Set<BeyondWidget>) => void, thisArg?: any): void;
        has(value: BeyondWidget): boolean;
        readonly size: number;
        entries(): IterableIterator<[
            BeyondWidget,
            BeyondWidget
        ]>;
        keys(): IterableIterator<BeyondWidget>;
        values(): IterableIterator<BeyondWidget>;
        [Symbol.iterator](): IterableIterator<BeyondWidget>;
        readonly [Symbol.toStringTag]: string;
    };
}

// FILE: instances\node.d.ts
declare namespace ns_instances_node {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    class NodeWidget {
        #private;
        get widget(): BeyondWidget;
        get parent(): BeyondWidget;
        get children(): Set<BeyondWidget>;
        constructor(widget: BeyondWidget, parent?: BeyondWidget);
    }
}

// FILE: prerendered\index.d.ts
declare namespace ns_prerendered_index {
    import IWidgetRendered = ns_widget_renderer.IWidgetRendered;
    const prerender: {
        readonly "__#49390@#ssr": IWidgetRendered[];
        readonly ssr: IWidgetRendered[];
        find(element: string, attrs: Map<string, string>): IWidgetRendered;
    };
}

// FILE: widget\attributes.d.ts
declare namespace ns_widget_attributes {
    /**
     * The global attributes specified in widgets.attributes that apply to all the widgets in the application
     */
    class WidgetGlobalAttributes {
        #private;
        get holder(): HTMLSpanElement;
        initialise(holder: HTMLSpanElement): void;
        destroy(): void;
    }
}

// FILE: widget\checksum.d.ts
declare namespace ns_widget_checksum {
    function _default(s: string): string | number;
}

// FILE: widget\csr.d.ts
declare namespace ns_widget_csr {
    import Events = dependency_0.Events;
    import BeyondWidget = ns_widget_index.BeyondWidget;
    interface IBeyondWidgetController {
        initialise: () => Promise<void>;
        attributeChanged: (name: string, old: string, value: string) => void;
        disconnect: () => void;
    }
    class WidgetCSR extends Events {
        #private;
        get bundle(): any;
        get controller(): IBeyondWidgetController;
        get error(): string;
        get loading(): boolean;
        get loaded(): boolean;
        initialise(): void;
        constructor(widget: BeyondWidget);
        disconnect(): void;
        attributeChanged(name: string, old: string, value: string): void;
    }
}

// FILE: widget\index.d.ts
declare namespace ns_widget_index {
    import NodeWidget = ns_instances_node.NodeWidget;
    import WidgetSR = ns_widget_sr.WidgetSR;
    import IBeyondWidgetController = ns_widget_csr.IBeyondWidgetController;
    import WidgetCSR = ns_widget_csr.WidgetCSR;
    import WidgetSSR = ns_widget_ssr.WidgetSSR;
    import StylesManager = ns_widget_styles_index.StylesManager;
    interface IWidgetSpecs {
        name: string;
        vspecifier: string;
        attrs?: string[];
        is?: string;
        layout?: string;
        route?: string;
        render: {
            multilanguage?: boolean;
            ssr: boolean;
            csr: boolean;
            sr: boolean;
        };
    }
    const Element: {
        new (): HTMLElement;
        prototype: HTMLElement;
    };
    class BeyondWidget extends Element {
        #private;
        get specs(): IWidgetSpecs;
        get name(): string;
        get vspecifier(): string;
        get specifier(): string;
        get host(): string;
        get is(): string;
        get route(): string;
        get layout(): string;
        get holder(): HTMLSpanElement;
        get sr(): WidgetSR;
        get csr(): WidgetCSR;
        get controller(): IBeyondWidgetController;
        get ssr(): WidgetSSR;
        get styles(): StylesManager;
        get wnode(): NodeWidget;
        get wparent(): BeyondWidget;
        get wchildren(): BeyondWidget[];
        constructor(specs: IWidgetSpecs);
        connectedCallback(): void;
        disconnectedCallback(): void;
        attributeChangedCallback(name: string, old: string, value: string): void;
    }
}

// FILE: widget\renderer.d.ts
declare namespace ns_widget_renderer {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    interface IWidgetRendered {
        element: string;
        html?: string;
        css?: string;
        errors?: string[];
        warnings?: string[];
        store?: object;
        attributes?: [
            string,
            string
        ][];
    }
    class Renderer {
        #private;
        constructor(widget: BeyondWidget);
        render(sr: IWidgetRendered): Promise<string>;
    }
}

// FILE: widget\sr.d.ts
declare namespace ns_widget_sr {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    import IWidgetRendered = ns_widget_renderer.IWidgetRendered;
    class WidgetSR {
        #private;
        get prerender(): IWidgetRendered;
        constructor(widget: BeyondWidget);
        initialise(): Promise<void>;
    }
}

// FILE: widget\ssr.d.ts
declare namespace ns_widget_ssr {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    import IWidgetRendered = ns_widget_renderer.IWidgetRendered;
    class WidgetSSR {
        #private;
        get prerender(): IWidgetRendered;
        constructor(widget: BeyondWidget);
        /**
         * Check if widget is already pre-rendered (index.html makes a page ssr fetch)
         */
        initialise(): Promise<void>;
    }
}

// FILE: widget\styles\global.d.ts
declare namespace ns_widget_styles_global {
    import BeyondWidget = ns_widget_index.BeyondWidget;
    import Events = dependency_0.Events;
    class GlobalCSS extends Events {
        #private;
        constructor(widget: BeyondWidget);
        get link(): string;
        update(): void;
    }
}

// FILE: widget\styles\index.d.ts
declare namespace ns_widget_styles_index {
    import Events = dependency_0.Events;
    import BeyondWidget = ns_widget_index.BeyondWidget;
    class StylesManager {
        #private;
        on: (event: string, listener: () => void) => Events;
        off: (event: string, listener: () => void) => Events;
        get version(): number;
        get resources(): Set<string>;
        get loaded(): boolean;
        get ready(): Promise<void>;
        onloaded: (event: Event | string) => boolean;
        update(links: string[]): void;
        constructor(widget: BeyondWidget);
        get initialised(): boolean;
        initialise(links: string[]): Promise<void>;
        destroy(): void;
    }
}

// FILE: widget\styles\link.d.ts
declare namespace ns_widget_styles_link {
    class _default {
        #private;
        get href(): string;
        get resource(): string;
        get version(): number;
        constructor(href: string);
    }
}

// FILE: widgets.d.ts
declare namespace ns_widgets {
    import IWidgetSpecs = ns_widget_index.IWidgetSpecs;
    import instances = ns_instances_index.instances;
    import Attributes = ns_attributes.Attributes;
    class BeyondWidgets extends Map<string, IWidgetSpecs> {
        #private;
        get ssr(): boolean;
        constructor();
        setup(config: {
            ssr?: boolean;
        }): void;
        get instances(): typeof instances;
        get attributes(): Attributes;
        register(specs: IWidgetSpecs[]): void;
    }
    const widgets: BeyondWidgets;
}

export import attributes = ns_attributes.attributes;
export import NodeWidget = ns_instances_node.NodeWidget;
export import prerender = ns_prerendered_index.prerender;
export import IBeyondWidgetController = ns_widget_csr.IBeyondWidgetController;
export import WidgetCSR = ns_widget_csr.WidgetCSR;
export import IWidgetSpecs = ns_widget_index.IWidgetSpecs;
export import BeyondWidget = ns_widget_index.BeyondWidget;
export import GlobalCSS = ns_widget_styles_global.GlobalCSS;
export import StylesManager = ns_widget_styles_index.StylesManager;
export import widgets = ns_widgets.widgets;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };