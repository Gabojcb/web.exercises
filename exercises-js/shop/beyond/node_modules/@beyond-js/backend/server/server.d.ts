/************
Processor: ts
************/

import * as dependency_0 from 'socket.io';

// FILE: bridges.d.ts
declare namespace ns_bridges {
    type MethodsSpecs = Map<string, {}>;
    type BridgeSpecs = Map<string, MethodsSpecs>;
    class Bridges {
        #private;
        initialize(): Promise<any>;
        get(module: string): Promise<{
            errors?: string[];
            classes?: BridgeSpecs;
        }>;
    }
    const bridges: Bridges;
}

// FILE: connection\cache\cache.d.ts
declare namespace ns_connection_cache_cache {
    class Cache {
        #private;
        constructor(socketId: string);
        has(key: string): boolean;
        get(key: string): any;
        insert(key: string, value: any): void;
        update(key: string, value: any): void;
    }
}

// FILE: connection\connection.d.ts
declare namespace ns_connection_connection {
    import Socket = dependency_0.Socket;
    class Connection {
        #private;
        constructor(socket: Socket);
        disconnect(): void;
    }
}

// FILE: connection\executor\action.d.ts
declare namespace ns_connection_executor_action {
    interface IActionRequest {
        id: string;
        module: string;
        action: string;
        params: any[];
    }
    class Action {
        #private;
        get error(): string;
        get id(): string;
        get module(): string;
        get className(): string;
        get method(): string;
        get params(): any[];
        constructor(rq: IActionRequest);
    }
}

// FILE: connection\executor\executor.d.ts
declare namespace ns_connection_executor_executor {
    import IActionRequest = ns_connection_executor_action.IActionRequest;
    import Socket = dependency_0.Socket;
    class Executor {
        #private;
        constructor(socket: Socket);
        /**
         * Execute an action
         *
         * @param rq
         * @return {Promise<{response: (*)}|{error: module.exports.error}>}
         */
        execute(rq: IActionRequest): Promise<any>;
    }
}

// FILE: server.d.ts
declare namespace ns_server {
    class BackendServer {
        #private;
        constructor(port: number);
    }
}

export import BackendServer = ns_server.BackendServer;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };