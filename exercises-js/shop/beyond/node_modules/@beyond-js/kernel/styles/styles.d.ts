/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/core';
import * as dependency_1 from '@beyond-js/kernel/bundle';

// FILE: dependencies-styles.d.ts
declare namespace ns_dependenciesstyles {
    import Events = dependency_0.Events;
    import V1Styles = ns_v1.V1Styles;
    class DependenciesStyles extends Events {
        #private;
        get elements(): Set<V1Styles>;
        constructor(vspecifier: string);
    }
}

// FILE: legacy.d.ts
declare namespace ns_legacy {
    class _default {
        #private;
        get engine(): string;
        get value(): string;
        get appended(): boolean;
        constructor(bundle: string, value: string);
        /**
         * @deprecated Only required by legacy applications
         */
        appendToDOM(is: string): void;
    }
}

// FILE: registry.d.ts
declare namespace ns_registry {
    import LegacyStyles = ns_legacy._default;
    import V1Styles = ns_v1.V1Styles;
    class Registry {
        #private;
        register(vspecifier: string, value: string): LegacyStyles | V1Styles;
        has(vspecifier: string): boolean;
        get(vspecifier: string): LegacyStyles | V1Styles;
    }
    const styles: Registry;
}

// FILE: v1.d.ts
declare namespace ns_v1 {
    import Events = dependency_0.Events;
    import Bundle = dependency_1.Bundle;
    class V1Styles extends Events {
        #private;
        get engine(): string;
        get bundle(): Bundle;
        get version(): number;
        get resource(): string;
        /**
         * The url of the stylesheet including the HMR version qs parameter
         *
         * @return {string}
         */
        get href(): string;
        constructor(resource: string);
        /**
         * Called by HMR in development environment
         */
        change(): void;
    }
}

export import DependenciesStyles = ns_dependenciesstyles.DependenciesStyles;
export import styles = ns_registry.styles;
export import V1Styles = ns_v1.V1Styles;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };