/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/kernel/core';

// FILE: application\index.d.ts
declare namespace ns_application_index {
    import Events = dependency_0.Events;
    class _default extends Events {
        #private;
        constructor();
    }
}

// FILE: hmr\index.d.ts
declare namespace ns_hmr_index {
    class _default {
        #private;
        constructor(devServer: number);
    }
}

// FILE: launchers\index.d.ts
declare namespace ns_launchers_index {
    import Launcher = ns_launchers_launcher._default;
    class _default {
        #private;
        get(id: string): Launcher;
    }
}

// FILE: launchers\launcher.d.ts
declare namespace ns_launchers_launcher {
    import Events = dependency_0.Events;
    class _default extends Events {
        #private;
        constructor(id: string);
        get status(): Promise<string>;
        start(): Promise<void>;
        stop(): Promise<void>;
    }
}

// FILE: local.d.ts
declare namespace ns_local {
    import HMR = ns_hmr_index._default;
    import Application = ns_application_index._default;
    import Launchers = ns_launchers_index._default;
    const local: {
        "__#67967@#launchers": Launchers;
        readonly launchers: Launchers;
        /**
         * Application styles and global styles hot code replacement
         * @private
         */
        "__#67967@#application": Application;
        readonly application: Application;
        "__#67967@#hmr": HMR;
        readonly hmr: HMR;
        "__#67967@#registered": any;
        /**
         * Register the inspection port of the engine to start running HMR
         *
         * @param {number} inspect
         * @param {number} devServer?
         */
        register(inspect: number, devServer: number): void;
    };
}

export import local = ns_local.local;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };