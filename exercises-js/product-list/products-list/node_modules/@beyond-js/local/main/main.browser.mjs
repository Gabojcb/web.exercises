import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from '@beyond-js/backend/client';
import * as dependency_2 from '@beyond-js/kernel/core';
import * as dependency_3 from 'socket.io-client';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"@beyond-js/local@0.1.3/main"},"type":"ts"}, import.meta.url).package();;

__pkg.dependencies.update([['@beyond-js/backend/client', dependency_1],['@beyond-js/kernel/core', dependency_2],['socket.io-client', dependency_3]]);

const ims = new Map();

/***********************************
INTERNAL MODULE: ./application/index
***********************************/

ims.set('./application/index', {hash: 2751618994, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _client = require("@beyond-js/backend/client");
var _core = require("@beyond-js/kernel/core");
class _default extends _core.Events {
  /**
   * The application styles has changed, therefore it must be updated
   */
  #update = is => {
    const resource = is === 'application' ? 'styles' : 'global';
    document.getElementById(`beyond-${is}-styles`).setAttribute('href', `/${resource}.css?updated=${Date.now()}`);
    if (is === 'global') {
      const {
        instances
      } = brequire('@beyond-js/kernel/bundle');
      if (instances.has('@beyond-js/widgets/render')) {
        const {
          globalcss
        } = instances.get('@beyond-js/widgets/render').package().exports.values;
        globalcss.update();
      }
    }
    this.trigger(`${is}:change`);
  };
  #subscribe = async () => {
    const backend = await _client.backends.get('@beyond-js/local');
    const socket = await backend.socket;
    socket.on('application-styles', () => this.#update('application'));
    socket.on('global-styles', () => this.#update('global'));
  };
  constructor() {
    super();
    if (typeof globalThis.process !== 'undefined') return;
    this.#subscribe().catch(exc => console.error(exc.stack));
  }
}
exports.default = _default;
}});

/***************************
INTERNAL MODULE: ./hmr/index
***************************/

ims.set('./hmr/index', {hash: 520602716, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bundle = require("@beyond-js/kernel/bundle");
var _client = require("@beyond-js/backend/client");
class _default {
  #devServer;
  #changes = new Map();
  async #js(vspecifier, language) {
    if (!_bundle.instances.has(vspecifier)) return;
    const pkg = _bundle.instances.get(vspecifier).package(language !== '.' ? language : '');
    const change = (() => {
      !this.#changes.has(vspecifier) && this.#changes.set(vspecifier, 0);
      const change = this.#changes.get(vspecifier);
      this.#changes.set(vspecifier, change + 1);
      return change;
    })();
    try {
      const resource = (() => {
        if (!this.#devServer) return `${pkg.vspecifier}?hmr=${change}`;
        const split = vspecifier.split('/');
        split[0].startsWith('@') && split.shift(); // Remove the scope
        split.shift(); // Remove the name of the package
        const subpath = split.join('/');
        return `http://localhost:${this.#devServer}/${subpath}.js?hmr=${change}`;
      })();
      await bimport(resource, change);
    } catch (exc) {
      console.log(`Error loading hmr of bundle "${pkg.bundle.id}"`, exc.stack);
    }
  }
  async #css(vspecifier) {
    if (typeof location !== 'object') return;
    const {
      styles
    } = await bimport('@beyond-js/kernel/styles');
    if (!styles.has(vspecifier)) return;
    styles.get(vspecifier).change();
  }
  async #onchange({
    vspecifier,
    language,
    extname
  }) {
    if (extname === '.js') return await this.#js(vspecifier, language);
    if (extname === '.css') return await this.#css(vspecifier);
  }
  #subscribe = async () => {
    const backend = await _client.backends.get('@beyond-js/local');
    const socket = await backend.socket;
    socket.on('bundle/change', message => this.#onchange(message).catch(exc => console.log(exc.stack)));
  };
  constructor(devServer) {
    this.#devServer = devServer;
    this.#subscribe().catch(exc => console.error(exc.stack));
  }
}
exports.default = _default;
}});

/*********************************
INTERNAL MODULE: ./launchers/index
*********************************/

ims.set('./launchers/index', {hash: 1827458998, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _launcher = require("./launcher");
class _default {
  #launchers = new Map();
  get(id) {
    if (this.#launchers.has(id)) return this.#launchers.get(id);
    const launcher = new _launcher.default(id);
    this.#launchers.set(id, launcher);
    return launcher;
  }
}
exports.default = _default;
}});

/************************************
INTERNAL MODULE: ./launchers/launcher
************************************/

ims.set('./launchers/launcher', {hash: 686597120, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _beyond_context = require("beyond_context");
var _core = require("@beyond-js/kernel/core");
class _default extends _core.Events {
  #id;
  constructor(id) {
    super();
    this.#id = id;
  }
  #status = async () => {
    return await _beyond_context.module.execute('launchers/status', {
      id: this.#id
    });
  };
  get status() {
    return this.#status();
  }
  async start() {
    await _beyond_context.module.execute('launchers/start', {
      id: this.#id
    });
  }
  async stop() {
    await _beyond_context.module.execute('launchers/stop', {
      id: this.#id
    });
  }
}
exports.default = _default;
}});

/***********************
INTERNAL MODULE: ./local
***********************/

ims.set('./local', {hash: 1978769925, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.local = void 0;
var _hmr = require("./hmr");
var _application = require("./application");
var _launchers = require("./launchers");
var _client = require("@beyond-js/backend/client");
/*bundle*/const local = new class BeyondLocal {
  #launchers;
  get launchers() {
    return this.#launchers;
  }
  /**
   * Application styles and global styles hot code replacement
   * @private
   */
  #application;
  get application() {
    return this.#application;
  }
  #hmr;
  get hmr() {
    return this.#hmr;
  }
  #registered;
  /**
   * Register the inspection port of the engine to start running HMR
   *
   * @param {number} inspect
   * @param {number} devServer?
   */
  register(inspect, devServer) {
    if (this.#registered) throw new Error('@beyond-js/local .register method call should be called only once');
    this.#registered = true;
    _client.backends.register('@beyond-js/local', `http://localhost:${inspect}`);
    this.#launchers = new _launchers.default();
    this.#hmr = new _hmr.default(devServer);
    this.#application = new _application.default();
  }
}();
exports.local = local;
}});

__pkg.exports.descriptor = [{"im":"./local","from":"local","name":"local"}];

export let local;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'local') && (local = require ? require('./local').local : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=main.browser.mjs.map