/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/core';
// current.ts
declare namespace ns_0 {
  import Events = __beyond_dep_ns_0.Events;
  interface IWidgetStore {
    toJSON(): object | void;
    hydrate?(cached: object): Promise<void>;
    fetch(): Promise<void>;
  }
  /**
   * The texts loaded by the current language (not available in SSR environment)
   */
  export class CurrentTexts<TextsDeclaration> extends Events implements IWidgetStore {
    #private;
    get bundle(): string;
    get enabled(): boolean;
    set enabled(value: boolean);
    get loading(): boolean;
    get loaded(): boolean;
    get ready(): boolean;
    get value(): TextsDeclaration;
    /**
     * Current texts constructor
     *
     * @param {string} bundle
     */
    constructor(bundle: string);
    fetch(): Promise<void>;
    /**
     * @deprecated Deprecated method. Use .fetch instead
     * @return {Promise<void>}
     */
    load(): Promise<void>;
    destroy(): void;
    toJSON(): {};
  }
  export {};
}


// texts.ts
declare namespace ns_1 {
  import Events = __beyond_dep_ns_0.Events;
  interface IWidgetStore {
    toJSON(): object | void;
    hydrate?(cached: object): Promise<void>;
    fetch(): Promise<void>;
  }
  export class Texts<TextsDeclaration> extends Events implements IWidgetStore {
    #private;
    get module(): string;
    get bundle(): string;
    get transversal(): string;
    get multilanguage(): boolean;
    get language(): string;
    get loaded(): boolean;
    get loading(): boolean;
    get value(): TextsDeclaration;
    get ready(): boolean;
    /**
     * Module texts constructor
     *
     * @param {string} module The module resource
     * @param {{transversal: string, language: string}} specs
     */
    constructor(module: string, specs: {
      transversal?: string;
      language?: string;
      bundle?: string;
    });
    fetch(): Promise<void>;
    /**
     * @deprecated Deprecated method. Use .fetch instead
     * @return {Promise<void>}
     */
    load(): Promise<void>;
    destroy(): void;
    toJSON(): {};
  }
  export {};
}


export import CurrentTexts = ns_0.CurrentTexts;
export import Texts = ns_1.Texts;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };