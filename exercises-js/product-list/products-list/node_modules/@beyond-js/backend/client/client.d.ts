/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/bundle';
import * as __beyond_dep_ns_1 from '@beyond-js/kernel/core';
import * as __beyond_dep_ns_2 from 'socket.io-client';
// action\bridge.ts
declare namespace ns_0 {
  import Bundle = __beyond_dep_ns_0.Bundle;
  export class ActionsBridge {
    #private;
    constructor(distribution: string, bundle: Bundle);
    execute(action: string, ...params: any[]): Promise<any>;
  }
}


// action\execution-error.ts
declare namespace ns_1 {
  interface StackFrame {
    is: string;
    file: string;
    line: number;
    column: number;
  }
  type Stack = StackFrame[];
  export const ExecutionError: {
    new (message: string, stack: Stack): {
      readonly "__#104782@#message": string;
      readonly message: string;
      readonly "__#104782@#stack": Stack;
      readonly stack: Stack;
    };
  };
  export {};
}


// action\index.ts
declare namespace ns_2 {
  import Events = __beyond_dep_ns_1.Events;
  export class _default extends Events {
    #private;
    get module(): string;
    get action(): string;
    get params(): any[];
    constructor(backend: string, module: string, action: string, ...params: any[]);
    get id(): number;
    get channel(): string;
    get executed(): boolean;
    get executing(): boolean;
    get error(): boolean;
    execute(): Promise<any>;
  }
}


// backend.ts
declare namespace ns_3 {
  import ServiceIOConfiguration = ns_5.ServiceIOConfiguration;
  export class Backend {
    #private;
    get pkg(): string;
    get host(): string;
    get local(): string;
    get io(): ServiceIOConfiguration;
    constructor(pkg: string, host: string, local?: string);
    get socket(): Promise<Socket>;
  }
}


// backends.ts
declare namespace ns_4 {
  import Backend = ns_3.Backend;
  export const backends: {
    readonly "__#104781@#hosts": Map<string, Backend>;
    register(pkg: string, host: string): void;
    get(pkg: string): Promise<Backend>;
    /**
     * @deprecated Actually used by the legacy module.execute(...)
     *
     * @param {string} pkg
     * @param {string} distribution
     * @param {string} module
     * @param {string} action
     * @param params
     * @return {Promise<*>}
     */
    execute(pkg: string, distribution: string, module: string, action: string, ...params: any[]): Promise<any>;
  };
}


// io.ts
declare namespace ns_5 {
  export class ServiceIOConfiguration {
    querystring: () => object;
  }
}


// socket\index.ts
declare namespace ns_6 {
  import Socket = __beyond_dep_ns_2.Socket;
  import Backend = ns_3.Backend;
  export class _default {
    #private;
    constructor(backend: Backend);
    get(): Promise<Socket>;
  }
}


// socket\initiator.ts
declare namespace ns_7 {
  import Backend = ns_3.Backend;
  /**
   * Service launcher required only in local development environment
   */
  export class _default {
    #private;
    constructor(backend: Backend);
    check(): Promise<void>;
  }
}


export import ActionsBridge = ns_0.ActionsBridge;
export import Backend = ns_3.Backend;
export import backends = ns_4.backends;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };